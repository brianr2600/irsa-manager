---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: irsasetups.irsa-manager.kkb0318.github.io
spec:
  group: irsa-manager.kkb0318.github.io
  names:
    kind: IRSASetup
    listKind: IRSASetupList
    plural: irsasetups
    singular: irsasetup
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.selfHostedSetup[?(@.type=="Ready")].status
      name: SelfHostedReady
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IRSASetup represents a configuration for setting up IAM Roles
          for Service Accounts (IRSA) in a Kubernetes cluster.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: IRSASetupSpec defines the desired state of IRSASetup
            properties:
              cleanup:
                description: |-
                  Cleanup, when enabled, allows the IRSASetup to perform garbage collection
                  of resources that are no longer needed or managed.
                type: boolean
              discovery:
                description: |-
                  Discovery configures the IdP Discovery process, essential for setting up IRSA by locating
                  the OIDC provider information.
                properties:
                  s3:
                    description: S3 specifies the AWS S3 bucket details where the
                      OIDC provider's discovery information is hosted.
                    properties:
                      bucketName:
                        description: BucketName is the name of the S3 bucket that
                          hosts the OIDC discovery information.
                        type: string
                      region:
                        description: Region denotes the AWS region where the S3 bucket
                          is located.
                        type: string
                    required:
                    - bucketName
                    - region
                    type: object
                type: object
              mode:
                description: |-
                  Mode (Optional, Future Feature) Defines how the controller will operate once this feature is enabled.
                  Currently unused. Planned values:
                    - "selfhosted": For self-managed Kubernetes clusters.
                    - "eks": For Amazon EKS environments.
                type: string
            required:
            - cleanup
            - discovery
            type: object
          status:
            description: IRSASetupStatus defines the observed state of IRSASetup
            properties:
              selfHostedSetup:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
