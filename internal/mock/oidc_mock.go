// Code generated by MockGen. DO NOT EDIT.
// Source: internal/selfhosted/oidc.go
//
// Generated by this command:
//
//	mockgen -source internal/selfhosted/oidc.go -destination internal/mock/oidc_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	selfhosted "github.com/kkb0318/irsa-manager/internal/selfhosted"
	gomock "go.uber.org/mock/gomock"
)

// MockOIDCIssuerMeta is a mock of OIDCIssuerMeta interface.
type MockOIDCIssuerMeta struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCIssuerMetaMockRecorder
}

// MockOIDCIssuerMetaMockRecorder is the mock recorder for MockOIDCIssuerMeta.
type MockOIDCIssuerMetaMockRecorder struct {
	mock *MockOIDCIssuerMeta
}

// NewMockOIDCIssuerMeta creates a new mock instance.
func NewMockOIDCIssuerMeta(ctrl *gomock.Controller) *MockOIDCIssuerMeta {
	mock := &MockOIDCIssuerMeta{ctrl: ctrl}
	mock.recorder = &MockOIDCIssuerMetaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCIssuerMeta) EXPECT() *MockOIDCIssuerMetaMockRecorder {
	return m.recorder
}

// IssuerHostPath mocks base method.
func (m *MockOIDCIssuerMeta) IssuerHostPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuerHostPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// IssuerHostPath indicates an expected call of IssuerHostPath.
func (mr *MockOIDCIssuerMetaMockRecorder) IssuerHostPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuerHostPath", reflect.TypeOf((*MockOIDCIssuerMeta)(nil).IssuerHostPath))
}

// IssuerUrl mocks base method.
func (m *MockOIDCIssuerMeta) IssuerUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuerUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// IssuerUrl indicates an expected call of IssuerUrl.
func (mr *MockOIDCIssuerMetaMockRecorder) IssuerUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuerUrl", reflect.TypeOf((*MockOIDCIssuerMeta)(nil).IssuerUrl))
}

// MockOIDCIdP is a mock of OIDCIdP interface.
type MockOIDCIdP struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCIdPMockRecorder
}

// MockOIDCIdPMockRecorder is the mock recorder for MockOIDCIdP.
type MockOIDCIdPMockRecorder struct {
	mock *MockOIDCIdP
}

// NewMockOIDCIdP creates a new mock instance.
func NewMockOIDCIdP(ctrl *gomock.Controller) *MockOIDCIdP {
	mock := &MockOIDCIdP{ctrl: ctrl}
	mock.recorder = &MockOIDCIdPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCIdP) EXPECT() *MockOIDCIdPMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOIDCIdP) Create(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOIDCIdPMockRecorder) Create(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOIDCIdP)(nil).Create), ctx)
}

// IsUpdate mocks base method.
func (m *MockOIDCIdP) IsUpdate() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpdate")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpdate indicates an expected call of IsUpdate.
func (mr *MockOIDCIdPMockRecorder) IsUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpdate", reflect.TypeOf((*MockOIDCIdP)(nil).IsUpdate))
}

// Update mocks base method.
func (m *MockOIDCIdP) Update(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOIDCIdPMockRecorder) Update(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOIDCIdP)(nil).Update), ctx)
}

// MockOIDCIdPDiscoveryContents is a mock of OIDCIdPDiscoveryContents interface.
type MockOIDCIdPDiscoveryContents struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCIdPDiscoveryContentsMockRecorder
}

// MockOIDCIdPDiscoveryContentsMockRecorder is the mock recorder for MockOIDCIdPDiscoveryContents.
type MockOIDCIdPDiscoveryContentsMockRecorder struct {
	mock *MockOIDCIdPDiscoveryContents
}

// NewMockOIDCIdPDiscoveryContents creates a new mock instance.
func NewMockOIDCIdPDiscoveryContents(ctrl *gomock.Controller) *MockOIDCIdPDiscoveryContents {
	mock := &MockOIDCIdPDiscoveryContents{ctrl: ctrl}
	mock.recorder = &MockOIDCIdPDiscoveryContentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCIdPDiscoveryContents) EXPECT() *MockOIDCIdPDiscoveryContentsMockRecorder {
	return m.recorder
}

// Discovery mocks base method.
func (m *MockOIDCIdPDiscoveryContents) Discovery() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discovery")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discovery indicates an expected call of Discovery.
func (mr *MockOIDCIdPDiscoveryContentsMockRecorder) Discovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discovery", reflect.TypeOf((*MockOIDCIdPDiscoveryContents)(nil).Discovery))
}

// JWK mocks base method.
func (m *MockOIDCIdPDiscoveryContents) JWK() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWK")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JWK indicates an expected call of JWK.
func (mr *MockOIDCIdPDiscoveryContentsMockRecorder) JWK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWK", reflect.TypeOf((*MockOIDCIdPDiscoveryContents)(nil).JWK))
}

// JWKsFileName mocks base method.
func (m *MockOIDCIdPDiscoveryContents) JWKsFileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWKsFileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// JWKsFileName indicates an expected call of JWKsFileName.
func (mr *MockOIDCIdPDiscoveryContentsMockRecorder) JWKsFileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWKsFileName", reflect.TypeOf((*MockOIDCIdPDiscoveryContents)(nil).JWKsFileName))
}

// MockOIDCIdPDiscovery is a mock of OIDCIdPDiscovery interface.
type MockOIDCIdPDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCIdPDiscoveryMockRecorder
}

// MockOIDCIdPDiscoveryMockRecorder is the mock recorder for MockOIDCIdPDiscovery.
type MockOIDCIdPDiscoveryMockRecorder struct {
	mock *MockOIDCIdPDiscovery
}

// NewMockOIDCIdPDiscovery creates a new mock instance.
func NewMockOIDCIdPDiscovery(ctrl *gomock.Controller) *MockOIDCIdPDiscovery {
	mock := &MockOIDCIdPDiscovery{ctrl: ctrl}
	mock.recorder = &MockOIDCIdPDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCIdPDiscovery) EXPECT() *MockOIDCIdPDiscoveryMockRecorder {
	return m.recorder
}

// CreateStorage mocks base method.
func (m *MockOIDCIdPDiscovery) CreateStorage(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorage", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStorage indicates an expected call of CreateStorage.
func (mr *MockOIDCIdPDiscoveryMockRecorder) CreateStorage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorage", reflect.TypeOf((*MockOIDCIdPDiscovery)(nil).CreateStorage), ctx)
}

// Upload mocks base method.
func (m *MockOIDCIdPDiscovery) Upload(ctx context.Context, o selfhosted.OIDCIdPDiscoveryContents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockOIDCIdPDiscoveryMockRecorder) Upload(ctx, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockOIDCIdPDiscovery)(nil).Upload), ctx, o)
}

// MockOIDCIdPFactory is a mock of OIDCIdPFactory interface.
type MockOIDCIdPFactory struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCIdPFactoryMockRecorder
}

// MockOIDCIdPFactoryMockRecorder is the mock recorder for MockOIDCIdPFactory.
type MockOIDCIdPFactoryMockRecorder struct {
	mock *MockOIDCIdPFactory
}

// NewMockOIDCIdPFactory creates a new mock instance.
func NewMockOIDCIdPFactory(ctrl *gomock.Controller) *MockOIDCIdPFactory {
	mock := &MockOIDCIdPFactory{ctrl: ctrl}
	mock.recorder = &MockOIDCIdPFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCIdPFactory) EXPECT() *MockOIDCIdPFactoryMockRecorder {
	return m.recorder
}

// IdP mocks base method.
func (m *MockOIDCIdPFactory) IdP(i selfhosted.OIDCIssuerMeta) (selfhosted.OIDCIdP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdP", i)
	ret0, _ := ret[0].(selfhosted.OIDCIdP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdP indicates an expected call of IdP.
func (mr *MockOIDCIdPFactoryMockRecorder) IdP(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdP", reflect.TypeOf((*MockOIDCIdPFactory)(nil).IdP), i)
}

// IdPDiscovery mocks base method.
func (m *MockOIDCIdPFactory) IdPDiscovery() selfhosted.OIDCIdPDiscovery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdPDiscovery")
	ret0, _ := ret[0].(selfhosted.OIDCIdPDiscovery)
	return ret0
}

// IdPDiscovery indicates an expected call of IdPDiscovery.
func (mr *MockOIDCIdPFactoryMockRecorder) IdPDiscovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdPDiscovery", reflect.TypeOf((*MockOIDCIdPFactory)(nil).IdPDiscovery))
}

// IdPDiscoveryContents mocks base method.
func (m *MockOIDCIdPFactory) IdPDiscoveryContents(i selfhosted.OIDCIssuerMeta) selfhosted.OIDCIdPDiscoveryContents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdPDiscoveryContents", i)
	ret0, _ := ret[0].(selfhosted.OIDCIdPDiscoveryContents)
	return ret0
}

// IdPDiscoveryContents indicates an expected call of IdPDiscoveryContents.
func (mr *MockOIDCIdPFactoryMockRecorder) IdPDiscoveryContents(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdPDiscoveryContents", reflect.TypeOf((*MockOIDCIdPFactory)(nil).IdPDiscoveryContents), i)
}

// IssuerMeta mocks base method.
func (m *MockOIDCIdPFactory) IssuerMeta() selfhosted.OIDCIssuerMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuerMeta")
	ret0, _ := ret[0].(selfhosted.OIDCIssuerMeta)
	return ret0
}

// IssuerMeta indicates an expected call of IssuerMeta.
func (mr *MockOIDCIdPFactoryMockRecorder) IssuerMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuerMeta", reflect.TypeOf((*MockOIDCIdPFactory)(nil).IssuerMeta))
}
